call plug#begin('~/.vim/plugins')
"" Eye Candy
Plug 'altercation/vim-colors-solarized'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

"" Common Utilities
Plug 'junegunn/vim-peekaboo'
Plug 'wincent/ferret'
Plug 'godlygeek/tabular', {'on' : 'Tab'}

"" Common Programming Utilities
Plug 'tpope/vim-commentary'
Plug 'lifepillar/vim-mucomplete'
Plug 'majutsushi/tagbar', {'on' : 'TagbarToggle'}

"" C/C++ specific Utilities
Plug 'vim-scripts/fly.vim', {'on' : 'SW', 'for' : ['c', 'cpp']}
Plug 'basilgor/vim-autotags', {'for' : ['c', 'cpp']}

"" Rust specific Utilities
Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh', 'for' : 'rust'}

"" Utilities in the Garage
" Plug 'tpope/vim-fugitive'
call plug#end()

"" Initializations
    set nocompatible                       " No comatibility with old Vi
    set ruler                              " Display line info in status line
    set number                             " Display line numbers on the left side
    set hidden                             " Hide closed buffers instead of closing them.
    set cursorline                         " Horizontal line to indicate cursor
    set wildmenu                           " Pressing tab in command mode shows options on status bar
    set noshowmode                         " Don't show mode on command line
    set splitbelow                         " Open a new split below the current one
    set splitright                         " Open a new vertical split to the right of the current one
    set autoread                           " Auto reload files changed outside vim
    set colorcolumn=80                     " 80-column marker
    set scrolloff=5                        " Number of lines to keep at the top and bottom of a window while scrolling
    set updatetime=500                     " Time interval to update windows
    set laststatus=2                       " Display Statusbar always.
    set showtabline=2                      " Display tabline always.
    set backspace=indent,eol,start         " Backspace works over whitespaces also
    set formatoptions+=jcron               " Join lines works well with comments
    set tags=tags;                         " Set vim to look for tags file recursively upwards
    set pastetoggle=<F2>                   " Toggle prevent unnecessary autoindent on mouse click paste
    set mouse=a                            " Enable Mouse in all modes
    let mapleader="\<Space>"               " For setting the leader
    syntax on                              " Enable syntax highlighting
    filetype plugin indent on              " Enable Filetype indent plugin

    set tabstop=4                          " Show a tabstop as 4 spaces
    set shiftwidth=4                       " Auto indent shifts 4 spaces
    set expandtab                          " Insert 4 spaces when Tab is pressed

    set incsearch                          " Incremental Search
    set hlsearch                           " Highlight searches
    set smartcase                          " Ignore case if searching lowercase, not otherwise

    set directory=~/.vim/tempfiles/
    set backupdir=~/.vim/tempfiles/
    set undodir=~/.vim/tempfiles/
    set undofile
    set undolevels=1000
    set undoreload=1000


    set t_Co=256                           " Set terminal to 256 colors
    set background=dark                    " Set dark colorschemes
    let g:solarized_termtrans=1            " Adjusts to terminal colors by itself
    silent! colorscheme solarized          " Set colorscheme to Solarized-dark

    if has("autocmd")
        "" Vim jumps to the last known position when reopening a file
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
        " Apply .vimrc on the fly after saving
        autocmd! bufwritepost .vimrc source $MYVIMRC
    endif

"" Copy-Paste-Fu
    " Cut/Copy/Replace selection to clipboard in visual mode
    vnoremap <leader>d "+d
    vnoremap <leader>y "+y
    vnoremap <leader>p "+p
    vnoremap <leader>P "+P
    " Paste from clipboard before/after position in normal mode
    nnoremap <leader>P "+P
    nnoremap <leader>p "+p
    " Place cursor after copy/paste position in Normal/Visual mode
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]

" Easy save as sudo
    cnoremap w!! w !sudo tee %

" Opens help in a vertical split rather than horizontal
    cnoremap vh vert help

"" Easy <ESC> in INSERT mode
    inoremap jj <Esc>
    inoremap jk <Esc>
    inoremap kj <Esc>

"" Navigation mappings
    " Go between lines in wrapped lines.
    nnoremap j gj
    nnoremap k gk

    " Buffer movements
    noremap <C-n> :bnext<CR>
    noremap <C-p> :bprevious<CR>

    " Maps Ctrl+[h,j,k,l] to move between window splits
    noremap <C-h> <C-w>h
    noremap <C-j> <C-w>j
    noremap <C-k> <C-w>k
    noremap <C-l> <C-w>l

    " Maps Ctrl+arrow keys to resize the window splits
    map <C-Down> <C-w>+ 
    map <C-Up> <C-W>-
    map <C-Left> <C-W><
    map <C-Right> <C-w>>

"" Autotags Settings
    nmap <leader>au :call AutotagsUpdate()<CR>
    let g:autotags_pathhash_humanreadable = 1
    let g:autotags_ctags_exe = "echo"
    let g:autotags_ctags_opts = ""

"" Lightline+Bufferline settings
    let g:lightline#bufferline#unnamed = '[new]'
    let g:lightline#bufferline#show_number = 1
    let g:lightline = {
        \ 'colorscheme': 'deus',
        \ 'component': { 'lineinfo': ' %3l:%-2v' },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' },
        \ 'component_function': {
        \     'readonly': 'LightlineReadonly',
        \     'fugitive': 'LightlineFugitive'
        \   },
        \ 'tabline': { 'left': [['buffers']], 'right': [['close']] },
        \ 'component_expand': { 'buffers': 'lightline#bufferline#buffers' },
        \ 'component_type': { 'buffers': 'tabsel', },
        \ }

    function! LightlineReadonly()
        return &readonly ? '' : ''
    endfunction

    function! LightlineFugitive()
        if exists('*fugitive#head')
            let branch = fugitive#head()
            return branch !=# '' ? ''.branch : ''
        endif
        return ''
    endfunction

"" FLY settings
    let g:FlyCscopeCase = 1
    nnoremap <leader>5 :SW<CR>

"" MuComplete settings
    let g:mucomplete#enable_auto_at_startup = 1
    set shortmess+=c   " Shut off completion messages
    set belloff+=ctrlg " If Vim beeps during completion
    set completeopt+=menuone
    set completeopt+=noselect
    set completeopt+=noinsert
    set completeopt-=preview
    set noinfercase

"" Tagbar settings
    let g:tagbar_width = 30
    let g:tagbar_indent = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_foldlevel = 9
    let g:tagbar_sort = 0
    let g:tagbar_case_insensitive = 1
    let g:tagbar_singleclick = 1
    nnoremap <leader>6 :TagbarToggle<CR>

"" LanguageClient settings
    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_serverCommands = { 'rust' : ['rustup', 'run', 'stable', 'rls'] }
    set completefunc+=LanguageClient#complete
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
