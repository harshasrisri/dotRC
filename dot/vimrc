call plug#begin('~/.vim/plugins')
    "" Eye Candy
    Plug 'lifepillar/vim-solarized8'
    Plug 'itchyny/lightline.vim'
    Plug 'mengelbrecht/lightline-bufferline'
    
    "" Common Utilities
    Plug 'junegunn/vim-peekaboo'
    Plug 'junegunn/fzf', { 'dir': '~/.vim/fzf', 'do': './install --all --no-update-rc' }
    Plug 'junegunn/fzf.vim'
    Plug 'godlygeek/tabular', {'on' : 'Tab'}
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-rsi'
    Plug 'chaoren/vim-wordmotion'
    Plug 'wellle/targets.vim'
    Plug 'terryma/vim-expand-region'
    Plug 'joeytwiddle/sexy_scroller.vim'
    
    "" Common Programming Utilities
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-surround'
    Plug 'cohama/lexima.vim'
    Plug 'Yggdroot/indentLine'
    Plug 'lifepillar/vim-mucomplete', { 'for': ['rust','c','cpp'] }
    Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh' }
    Plug 'majutsushi/tagbar'
    Plug 'm-pilia/vim-ccls'
    Plug 'puremourning/vimspector'
call plug#end()

" NOTE: See Neovim Specific settings in ~/.config/nvim/init.vim

"" Initializations
    set nocompatible                       " No comatibility with old Vi
    set ruler                              " Display line info in status line
    set number                             " Display line numbers on the left side
    set hidden                             " Hide closed buffers instead of closing them.
    set noshowmode                         " Don't show mode on command line
    set splitbelow                         " Open a new split below the current one
    set splitright                         " Open a new vertical split to the right of the current one
    set scrolloff=5                        " Nun lines to keep top and bottom of a window while scrolling

    set updatetime=500                     " Time interval to update windows
    set backspace=indent,eol,start         " Backspace works over whitespaces also
    set formatoptions+=jcrn                " Join lines works well with comments
    set pastetoggle=<F2>                   " Toggle prevent unnecessary autoindent on mouse click paste
    set autoread                           " Auto reload files changed outside vim
    set mouse=a                            " Enable Mouse in all modes

    set wildmenu                           " Pressing tab in command mode shows options on status bar
    set laststatus=2                       " Display Statusbar always.
    set showtabline=2                      " Display tabline always.

    set tabstop=4                          " Show a tabstop as 4 spaces
    set shiftwidth=4                       " Auto indent shifts 4 spaces
    set expandtab                          " Insert 4 spaces when Tab is pressed

    set incsearch                          " Incremental Search
    set hlsearch                           " Highlight searches
    set smartcase                          " Ignore case if searching lowercase, not otherwise

    set directory=~/.vim/tempfiles/        " Central directory for swap files
    set backupdir=~/.vim/tempfiles/        " Central directory for backup files
    set undodir=~/.vim/tempfiles/          " Central directory for file undo history
    set undofile                           " Remember undo history for closed files

    set cursorline                         " Horizontal line to indicate cursor
    set colorcolumn=80                     " 80-column marker
    set termguicolors                      " Set terminal to true colors
    set background=dark                    " Set dark colorschemes
    silent! colorscheme solarized8_high    " Set colorscheme to Solarized-dark
    set guifont=Fira\ Code\ Retina:h10
    set fillchars+=vert:▎                  " make the vertical split bar a slim line with no background
    hi VertSplit ctermbg=NONE guibg=NONE   " Set split background color to NONE

    syntax on                              " Enable syntax highlighting
    filetype plugin indent on              " Enable Filetype indent plugin
    let mapleader="\<Space>"               " For setting the leader

    augroup Initializations
        autocmd!
        "" Vim jumps to the last known position when reopening a file
        au! BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
        " Apply .vimrc on the fly after saving
        au! BufWritePost .vimrc ++nested source $MYVIMRC
    augroup END

    if (!has('nvim'))
        let &t_ZH="\e[3m"
        let &t_ZR="\e[23m"
        hi Comment cterm=italic
    endif

"" Copy Paste
    " Cut/Copy/Replace selection to clipboard in visual mode
    vnoremap <leader>d "+d
    vnoremap <leader>y "+y
    vnoremap <leader>p "+p
    vnoremap <leader>P "+P
    " Paste from clipboard before/after position in normal mode
    nnoremap <leader>P "+P
    nnoremap <leader>p "+p
    " Place cursor after copy/paste position in Normal/Visual mode
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]

"" Navigation
    " Go between lines in wrapped lines.
    nnoremap j gj
    nnoremap k gk
    " Move between buffers easily
    nnoremap <C-n> :bnext<CR>
    nnoremap <C-p> :bprev<CR>
    " Go to first/last non-blank character
    nnoremap 0 ^
    nnoremap $ g_
    " Maps Ctrl+[h,j,k,l] to move between window splits
    nnoremap <leader>h <C-w>h
    nnoremap <leader>j <C-w>j
    nnoremap <leader>k <C-w>k
    nnoremap <leader>l <C-w>l
    " Maps Ctrl+arrow keys to resize the window splits
    nnoremap <C-h> <C-w>< 
    nnoremap <C-j> <C-W>-
    nnoremap <C-k> <C-W>+
    nnoremap <C-l> <C-w>>

"" Miscellaneous
    " Easy save as sudo
    cnoremap w!! w !sudo tee %
    " Opens help in a vertical split rather than horizontal
    cnoremap vh  vert help
    cnoremap hh help
    "" Easy <ESC> in INSERT mode
    inoremap jj <Esc>
    "" Easy enter command mode
    nnoremap ; :

"" FZF
    nnoremap <leader>fb :Buffers<CR>
    nnoremap <leader>f/ :BLines<CR>
    nnoremap <leader>fh :History<CR>
    nnoremap <leader>fc :Commands<CR>
    nnoremap <leader>fm :Maps<CR>
    nnoremap <leader>ff :Files<CR>
    nnoremap <leader>fr :Rg<Space>
    let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9, 'border': 'rounded' } }
    let $FZF_DEFAULT_OPTS="--preview=bat --reverse "
    command! -nargs=? -complete=dir AF
                \ call fzf#run(fzf#wrap(fzf#vim#with_preview({
                \   'source': 'fd --type f --hidden --follow --exclude .git --no-ignore . '.expand(<q-args>)
                \ })))

"" Lightline+Bufferline
    let g:lightline#bufferline#unnamed = '[new]'
    let g:lightline#bufferline#filename_modifier = ':t'
    let g:lightline#bufferline#unicode_symbols = 1
    let g:lightline = {
        \ 'colorscheme': 'deus',
        \ 'active': { 'left': [ [ 'mode', 'paste' ], [ 'readonly', 'modified' , 'fugitive', 'filename', 'method' ] ] },
        \ 'component': { 'lineinfo': ' %3l:%-2v' },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' },
        \ 'component_function': {
        \     'readonly': 'LightlineReadonly',
        \     'fugitive': 'LightlineFugitive',
        \     'method'  : 'NearestMethodOrFunction',
        \   },
        \ 'tabline': { 'left': [['buffers']], 'right': [['close']] },
        \ 'component_expand': { 'buffers': 'lightline#bufferline#buffers' },
        \ 'component_type': { 'buffers': 'tabsel', },
        \ }

    function! LightlineReadonly()
        return &readonly ? '' : ''
    endfunction

    function! LightlineFugitive()
        let branch = FugitiveHead()
        return branch !=# '' ? ' '.branch : ''
    endfunction

    function! NearestMethodOrFunction() abort
        return tagbar#currenttag('%s', '', 'f')
    endfunction

"" indentLine
    let g:indentLine_char = "│"
    let g:indentLine_faster = 1

"" MuComplete
    set shortmess+=c
    set belloff+=ctrlg
    set completeopt-=preview
    set completeopt+=menuone,noselect,noinsert
    set noinfercase
    let g:mucomplete#enable_auto_at_startup = 1
    let g:mucomplete#chains = {}
    let g:mucomplete#chains.default = ['omni', 'c-n', 'path', 'tags', 'dict']
    let s:cpp_cond = { t -> t =~# '\%(->\|::\|\.\)$' }
    let g:mucomplete#can_complete = {}
    let g:mucomplete#can_complete.cpp = { 'omni': s:cpp_cond }

"" Tagbar settings
    let g:tagbar_width = 50
    let g:tagbar_indent = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_foldlevel = 9
    let g:tagbar_sort = 0
    let g:tagbar_case_insensitive = 1
    let g:tagbar_singleclick = 1

"" LanguageClient
    function! LCN_Mappings()
        let g:LanguageClient_fzfOptions = fzf#vim#with_preview('right:50%', '?').options
        let g:LanguageClient_serverCommands = {
                    \ 'rust' : ['rustup', 'run', 'stable', 'rls'],
                    \ 'cpp'  : ['ccls', '--log-file=/tmp/ccls.log'],
                    \ 'c'    : ['ccls', '--log-file=/tmp/ccls.log'],
                    \ }

        set omnifunc=LanguageClient#complete
        set completefunc=LanguageClient#complete
        set formatexpr=LanguageClient#textDocument_rangeFormatting()
        set signcolumn=yes

        " Go to symbol definition
        nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
        " Go to definition of type of symbol
        nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
        " Show all base class definitions
        nnoremap <leader>lb :call LanguageClient#findLocations({'method':'$ccls/inheritance'})<CR>
        " Show all derived class definitions
        nnoremap <leader>lD :call LanguageClient#findLocations({'method':'$ccls/inheritance','derived':v:true})<CR>
        " Find all references to the symbol
        nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
        " Find all the callers of a method
        nnoremap <leader>lc :call LanguageClient#findLocations({'method':'$ccls/call'})<CR>
        " Find all the callees of a method
        nnoremap <leader>lC :call LanguageClient#findLocations({'method':'$ccls/call','callee':v:true})<CR>
        " Trigger hover action over a symbol for additional context
        nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
        " Menu opening all available LangServer options
        nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
        " Rename Symbol
        nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
        " Find all the implementations
        nnoremap <leader>li :call :LanguageClient#textDocument_implementation()<CR>
    endfunction

    function! LCN_Highlighting(running) abort
        if a:running.result
            call LanguageClient#textDocument_documentHighlight()
        endif
    endfunction

    augroup LCN_AutoCommands
        au!
        au FileType rust,c,cpp silent call LCN_Mappings()
        au CursorMoved,CursorMovedI *.rs,*.c,*.cpp,*.h,*.cc,*.hh silent call LanguageClient#isAlive(function('LCN_Highlighting'))
    augroup END

" Vim Sexy Scroller
    let g:SexyScroller_MaxTime = 200
    let g:SexyScroller_EasingStyle = 3

" Vimspector
    " Debugger continue, stop, restart and pause
    nmap <leader>dc <Plug>VimspectorContinue
    nmap <leader>ds <Plug>VimspectorStop
    nmap <leader>dr <Plug>VimspectorRestart
    nmap <leader>dp <Plug>VimspectorPause
    " Regular, conditional and functional breakpoints
    nmap <leader>bp <Plug>VimspectorToggleBreakpoint
    nmap <leader>bc <Plug>VimspectorToggleConditionalBreakpoint
    nmap <leader>bf <Plug>VimspectorAddFunctionBreakpoint
    " Next line, Step Into and Step Out of functions
    nmap <leader>sn <Plug>VimspectorStepOver
    nmap <leader>si <Plug>VimspectorStepInto
    nmap <leader>so <Plug>VimspectorStepOut
