call plug#begin('~/.vim/plugins')
    "" Eye Candy
    Plug 'lifepillar/vim-solarized8'
    Plug 'itchyny/lightline.vim'
    Plug 'mengelbrecht/lightline-bufferline'
    
    "" Common Utilities
    Plug 'junegunn/vim-peekaboo'
    Plug 'junegunn/fzf', { 'dir': '~/.vim/fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'godlygeek/tabular', {'on' : 'Tab'}
    Plug 'tpope/vim-fugitive'
    Plug 'mbbill/undotree'
    Plug 'tpope/vim-rsi'
    Plug 'psliwka/vim-smoothie'
    
    "" Common Programming Utilities
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-surround'
    Plug 'cohama/lexima.vim'
    Plug 'chaoren/vim-wordmotion'
    Plug 'Yggdroot/indentLine'
    Plug 'lifepillar/vim-mucomplete'
    Plug 'liuchengxu/vista.vim'
    Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh'}
    Plug 'terryma/vim-expand-region'
    Plug 'majutsushi/tagbar'
call plug#end()

"" Initializations
    set nocompatible                       " No comatibility with old Vi
    set ruler                              " Display line info in status line
    set number                             " Display line numbers on the left side
    set hidden                             " Hide closed buffers instead of closing them.
    set cursorline                         " Horizontal line to indicate cursor
    set wildmenu                           " Pressing tab in command mode shows options on status bar
    set noshowmode                         " Don't show mode on command line
    set splitbelow                         " Open a new split below the current one
    set splitright                         " Open a new vertical split to the right of the current one
    set autoread                           " Auto reload files changed outside vim
    set colorcolumn=80                     " 80-column marker
    set scrolloff=5                        " Number of lines to keep at the top and bottom of a window while scrolling
    set updatetime=500                     " Time interval to update windows
    set laststatus=2                       " Display Statusbar always.
    set showtabline=2                      " Display tabline always.
    set backspace=indent,eol,start         " Backspace works over whitespaces also
    set formatoptions+=jcron               " Join lines works well with comments
    set pastetoggle=<F2>                   " Toggle prevent unnecessary autoindent on mouse click paste
    set mouse=a                            " Enable Mouse in all modes
    set tabstop=4                          " Show a tabstop as 4 spaces
    set shiftwidth=4                       " Auto indent shifts 4 spaces
    set expandtab                          " Insert 4 spaces when Tab is pressed
    set incsearch                          " Incremental Search
    set hlsearch                           " Highlight searches
    set smartcase                          " Ignore case if searching lowercase, not otherwise
    set directory=~/.vim/tempfiles/        " Central directory for swap files
    set backupdir=~/.vim/tempfiles/        " Central directory for backup files
    set undodir=~/.vim/tempfiles/          " Central directory for file undo history
    set undofile                           " Remember undo history for closed files

    set termguicolors                      " Set terminal to true colors
    set background=dark                    " Set dark colorschemes
    silent! colorscheme solarized8_high    " Set colorscheme to Solarized-dark

    syntax on                              " Enable syntax highlighting
    filetype plugin indent on              " Enable Filetype indent plugin
    let mapleader="\<Space>"               " For setting the leader

    "" make the vertical split bar a slim line with no background
    set fillchars+=vert:▎                  " add a bar for vertical splits
    hi VertSplit ctermbg=NONE guibg=NONE   " Set split background color to NONE

    "" Vim jumps to the last known position when reopening a file
    au! BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

    " Apply .vimrc on the fly after saving
    au! BufWritePost .vimrc ++nested source $MYVIMRC

"" Copy Paste
    " Cut/Copy/Replace selection to clipboard in visual mode
    vnoremap <leader>d "+d
    vnoremap <leader>y "+y
    vnoremap <leader>p "+p
    vnoremap <leader>P "+P
    " Paste from clipboard before/after position in normal mode
    nnoremap <leader>P "+P
    nnoremap <leader>p "+p
    " Place cursor after copy/paste position in Normal/Visual mode
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]

"" Navigation
    " Go between lines in wrapped lines.
    nnoremap j gj
    nnoremap k gk

    " Buffer movements
    nnoremap <C-n> :bnext<CR>
    nnoremap <C-p> :bprevious<CR>

    " Maps Ctrl+[h,j,k,l] to move between window splits
    nnoremap <leader>h <C-w>h
    nnoremap <leader>j <C-w>j
    nnoremap <leader>k <C-w>k
    nnoremap <leader>l <C-w>l

    " Maps Ctrl+arrow keys to resize the window splits
    nnoremap <C-h> <C-w>< 
    nnoremap <C-j> <C-W>-
    nnoremap <C-k> <C-W>+
    nnoremap <C-l> <C-w>>

"" Miscellaneous
    " Easy save as sudo
    cnoremap w!! w !sudo tee %

    " Opens help in a vertical split rather than horizontal
    cnoremap vh vert help

    "" Easy <ESC> in INSERT mode
    inoremap jj <Esc>

"" FZF
    nnoremap <leader>fb :Buffers<CR>
    nnoremap <leader>f/ :BLines<CR>
    nnoremap <leader>fh :History<CR>
    nnoremap <leader>fc :Commands<CR>
    nnoremap <leader>fm :Maps<CR>
    nnoremap <leader>ff :Files<CR>
    nnoremap <leader>fr :Rg<Space>

"" Lightline+Bufferline
    let g:lightline#bufferline#unnamed = '[new]'
    let g:lightline#bufferline#show_number = 1
    let g:lightline = {
        \ 'colorscheme': 'deus',
        \ 'active': { 'left': [ [ 'mode', 'paste' ], [ 'readonly', 'modified' , 'fugitive', 'filename', 'method' ] ] },
        \ 'component': { 'lineinfo': ' %3l:%-2v' },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' },
        \ 'component_function': {
        \     'readonly': 'LightlineReadonly',
        \     'fugitive': 'LightlineFugitive',
        \     'method'  : 'NearestMethodOrFunction',
        \   },
        \ 'tabline': { 'left': [['buffers']], 'right': [['close']] },
        \ 'component_expand': { 'buffers': 'lightline#bufferline#buffers' },
        \ 'component_type': { 'buffers': 'tabsel', },
        \ }

    function! LightlineReadonly()
        return &readonly ? '' : ''
    endfunction

    function! LightlineFugitive()
        let branch = FugitiveHead()
        return branch !=# '' ? ' '.branch : ''
    endfunction

    function! NearestMethodOrFunction() abort
        return get(b:, 'vista_nearest_method_or_function', '')
    endfunction

"" Vista
    au! CursorMoved,VimEnter * sil call vista#RunForNearestMethodOrFunction()
    let g:vista_icon_indent = ["┗ ", "┣ "]
    let g:vista_default_executive = 'lcn'
    let g:vista_fzf_preview = ['right:50%']
    let g:vista_sidebar_width = 50
    let g:vista_echo_cursor_strategy = 'both'
    let g:vista_highlight_whole_line = 0
    let g:vista_executive_for = {
        \ 'vimwiki': 'markdown',
        \ 'pandoc': 'markdown',
        \ 'markdown': 'toc',
        \ }

"" indentLine
    let g:indentLine_char = "│"
    let g:indentLine_faster = 1

"" MuComplete
    set shortmess+=c   " Shut off completion messages
    set belloff+=ctrlg " If Vim beeps during completion
    set complete=.,w,b,u,k
    set completeopt+=menuone
    set completeopt+=noselect
    set completeopt+=noinsert
    set completeopt-=preview
    set noinfercase
    let g:mucomplete#enable_auto_at_startup = 1
    let g:mucomplete#chains = {}
    let g:mucomplete#chains.default = ['omni', 'c-n', 'path', 'tags', 'dict']
    let s:cpp_cond = { t -> t =~# '\%(->\|::\|\.\)$' }
    let g:mucomplete#can_complete = {}
    let g:mucomplete#can_complete.cpp = { 'omni': s:cpp_cond }

"" Tagbar settings
    let g:tagbar_width = 50
    let g:tagbar_indent = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_foldlevel = 9
    let g:tagbar_sort = 0
    let g:tagbar_case_insensitive = 1
    let g:tagbar_singleclick = 1

"" LanguageClient
    let g:LanguageClient_serverCommands = {
        \ 'rust' : ['rustup', 'run', 'stable', 'rls'],
        \ 'c': ['ccls', '--log-file=/tmp/ccls.log'],
        \ 'cpp': ['ccls', '--log-file=/tmp/ccls.log'],
        \ }
    function! LC_maps()
      if has_key(g:LanguageClient_serverCommands, &filetype)
        set completefunc=LanguageClient#complete
        set formatexpr=LanguageClient#textDocument_rangeFormatting()
        " Go to symbol definition
        nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
        " Go to definition of type of symbol
        nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
        " Show all base class definitions
        nnoremap <leader>lb :call LanguageClient#findLocations({'method':'$ccls/inheritance'})<CR>
        " Show all derived class definitions
        nnoremap <leader>lD :call LanguageClient#findLocations({'method':'$ccls/inheritance','derived':v:true})<CR>
        " Find all references to the symbol
        nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
        " Find all the callers of a method
        nnoremap <leader>lc :call LanguageClient#findLocations({'method':'$ccls/call'})<CR>
        " Find all the callees of a method
        nnoremap <leader>lC :call LanguageClient#findLocations({'method':'$ccls/call','callee':v:true})<CR>
        " Trigger hover action over a symbol for additional context
        nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
        " Menu opening all available LangServer options
        nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
        " Rename Symbol
        nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
        " Find all the implementations
        nnoremap <leader>li :call :LanguageClient#textDocument_implementation()<CR>
      endif
    endfunction

    augroup LanguageClient_config
        au!
        au FileType * call LanguageClient#isAlive(LC_maps())
        au CursorMoved,CursorMovedI * call LanguageClient#isAlive(LanguageClient#textDocument_documentHighlight())
    augroup END

